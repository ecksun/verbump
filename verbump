#!/bin/bash

set -e
set -u

assert_dependency() {
    local dep="$1"
    local reason="$2"
    local hint="$3"
    if ! hash "$dep" 2>/dev/null; then
        >&2 echo "Dependency $dep missing. $reason ($hint)"
        exit 1
    fi
}

assert_dependency semver "Required" "npm install -g semver"

is_sbt() {
    [ -f build.sbt ]
}

bump_sbt() {
    local bump_level
    local version
    local new_version
    bump_level="$1"
    version=$(grep -oP 'version := "\K([^"]+)(?=")' build.sbt)
    new_version=$(semver "$version" -i "$bump_level")
    sed -i 's/version := .*/version := "'"$new_version"'"/' build.sbt
    git add build.sbt
    commit_tag "$new_version"
    echo "[SBT] Bumped $bump_level verison: $version -> $new_version"
}

is_npm() {
    [ -f package.json ]
}

bump_npm() {
    assert_dependency npm "npm is required to bump package.json version" "sudo apt install npm"
    local bump_level="$1"
    npm version "$bump_level" | cut -c 2-
}

commit_tag() {
    local version="$1"
    git commit -m "$version"
    git tag --annotate --message "$version" "v${version}"
}

get_bump_level() {
    case "$1" in
        patch) ;&
        minor) ;&
        major) ;&
        preminor) ;&
        premajor) ;&
        prepatch) ;&
        prerelease)
        echo "$1"
        ;;
    *)
        echo "patch"
        ;;
    esac
}

bump_all() {
    local bump_level
    bump_level=$(get_bump_level "${1}")

    is_sbt && bump_sbt "$bump_level"
    is_npm && bump_npm "$bump_level"
}

bump_all "${1-patch}"
